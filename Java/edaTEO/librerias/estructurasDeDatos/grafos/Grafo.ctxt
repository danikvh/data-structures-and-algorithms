#BlueJ class context
comment0.target=Grafo
comment0.text=\ Clase\ abstracta\ Grafo\r\n\r\n\ \ Base\ de\ la\ jerarquia\ Grafo,\ que\ define\ el\ comportamiento\ de\ un\ grafo.\r\n\ \ No\ es\ una\ interfaz\ porque\ incluye\ el\ codigo\ de\ aquellas\ operaciones\ de\ un\ grafo\ \r\n\ \ que\ son\ independientes\ tanto\ de\ su\ tipo\ como\ de\ su\ implementacion.\r\n
comment1.params=esDirigido
comment1.target=Grafo(boolean)
comment1.text=\ Crea\ un\ grafo\ vacio,\ Dirigido\ si\ esDirigido\ es\ true\r\n\ \ o\ No\ Dirigido\ en\ caso\ contrario.\r\n\ \r\n\ \ @param\ esDirigido\ Indica\ el\ tipo\ del\ grafo,\ Dirigido\ o\ No\r\n
comment10.params=
comment10.target=java.lang.String\ toString()
comment10.text=\ Devuelve\ un\ String\ \r\n\ \ con\ cada\ uno\ de\ los\ vertices\ de\ un\ grafo\ y\ sus\ adyacentes,\ \r\n\ \ en\ orden\ de\ insercion\ \r\n\ \ @return\ \ String\ que\ representa\ a\ un\ grafo\r\n
comment11.params=
comment11.target=int[]\ finDelDFS()
comment11.text=Actividad\ 3\ *
comment12.params=v\ res
comment12.target=void\ finDelDFS(int,\ int[])
comment13.params=
comment13.target=int[]\ finDelDFSV2()
comment14.params=v\ res
comment14.target=void\ finDelDFSV2(int,\ int[])
comment15.params=v\ n
comment15.target=java.lang.String\ verticesCercanos(int,\ int)
comment16.params=v\ n
comment16.target=java.lang.String\ verticesCercanosV2(int,\ int)
comment17.params=
comment17.target=int\ maxVerticesCC()
comment18.params=v
comment18.target=int\ maxVerticesCC(int)
comment19.params=
comment19.target=int\ aristasHA()
comment2.params=
comment2.target=boolean\ esDirigido()
comment2.text=\ Comprueba\ si\ un\ grafo\ es\ o\ no\ Dirigido.\r\n\r\n\ \ @return\ boolean\ true\ si\ el\ grafo\ es\ Dirgido\ y\ false\ si\ es\ No\ Dirigido\r\n
comment20.params=v
comment20.target=int\ aristasHA(int)
comment21.params=
comment21.target=boolean\ colorDFS()
comment22.params=v\ colores
comment22.target=boolean\ colorDFS(int,\ boolean[])
comment23.params=
comment23.target=boolean\ colorBFS()
comment3.params=
comment3.target=int\ numVertices()
comment3.text=\ Devuelve\ el\ numero\ de\ vertices\ de\ un\ grafo.\r\n\ \ @return\ int\ numero\ de\ vertices\ de\ un\ grafo\r\n
comment4.params=
comment4.target=int\ numAristas()
comment4.text=\ Devuelve\ el\ numero\ de\ aristas\ de\ un\ grafo.\r\n\ \ @return\ int\ numero\ de\ aristas\ de\ un\ grafo\r\n
comment5.params=i\ j
comment5.target=boolean\ existeArista(int,\ int)
comment5.text=\ Comprueba\ si\ la\ arista\ (i,j)\ esta\ en\ un\ grafo.\r\n\ \ @param\ i\ \ \ \ Vertice\ origen\r\n\ \ @param\ j\ \ \ \ Vertice\ destino\r\n\ \ @return\ boolean\ true\ si\ (i,j)\ esta\ y\ false\ en\ caso\ contrario\r\n
comment6.params=i\ j
comment6.target=double\ pesoArista(int,\ int)
comment6.text=\ Devuelve\ el\ peso\ de\ la\ arista\ (i,j)\ de\ un\ grafo,\ \r\n\ \ 0\ si\ dicha\ arista\ no\ esta\ en\ el\ grafo.\r\n\ \ @param\ i\ \ \ \ Vertice\ origen\r\n\ \ @param\ j\ \ \ \ Vertice\ destino\r\n\ \ @return\ double\ Peso\ de\ la\ arista\ (i,j),\ 0\ si\ no\ existe.\r\n
comment7.params=i\ j
comment7.target=void\ insertarArista(int,\ int)
comment7.text=\ Si\ no\ est\u00EF\u00BF\u00BD,\ inserta\ la\ arista\ (i,\ j)\ en\ un\ grafo\ no\ Ponderado.\r\n\ \ @param\ i\ \ \ \ Vertice\ origen\r\n\ \ @param\ j\ \ \ \ Vertice\ destino\r\n
comment8.params=i\ j\ p
comment8.target=void\ insertarArista(int,\ int,\ double)
comment8.text=\ Si\ no\ est\u00EF\u00BF\u00BD,\ inserta\ la\ arista\ (i,\ j)\ de\ peso\ p\ en\ un\ grafo\ Ponderado.\r\n\ \ @param\ i\ \ \ \ Vertice\ origen\r\n\ \ @param\ j\ \ \ \ Vertice\ destino\r\n\ \ @param\ p\ \ \ \ Peso\ de\ la\ arista\ (i,j)\r\n
comment9.params=i
comment9.target=librerias.estructurasDeDatos.modelos.ListaConPI\ adyacentesDe(int)
comment9.text=\ Devuelve\ una\ Lista\ Con\ PI\ que\ contiene\ los\ adyacentes\ al\ vertice\ i\ de\ un\ grafo.\r\n\ \ @param\ i\ Vertice\ del\ que\ se\ obtienen\ los\ adyacentes\r\n\ \ @return\ ListaConPI\ con\ los\ vertices\ adyacentes\ a\ i\r\n
numComments=24
