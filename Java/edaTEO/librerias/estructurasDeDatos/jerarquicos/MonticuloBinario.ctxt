#BlueJ class context
comment0.target=MonticuloBinario
comment1.params=
comment1.target=MonticuloBinario()
comment1.text=crea\ un\ Heap\ vacio
comment10.params=
comment10.target=java.lang.String\ toString()
comment10.text=\ obtiene\ un\ String\ con\ los\ datos\ de\ una\ CP\ ordenados\ Por\ Niveles\ \r\n\ \ y\ con\ el\ formato\ que\ se\ usa\ en\ el\ estandar\ de\ Java\ (entre\ corchetes\r\n\ \ cuadrados\ y\ separando\ cada\ elemento\ del\ anterior\ mediante\ una\ coma\ \r\n\ \ seguida\ de\ un\ espacio\ en\ blanco);\ si\ la\ CP\ esta\ vacia\ el\ String\ \r\n\ \ resultado\ es\ []\r\n
comment11.params=
comment11.target=int\ contarHojas()
comment11.text=devuelve\ el\ numero\ de\ hojas\ de\ un\ Heap\ en\ Theta(1)
comment12.params=
comment12.target=java.lang.Comparable\ recuperarMax()
comment12.text=devuelve\ el\ maximo\ de\ un\ Heap\ tras\ talla/2\ compareTo
comment13.params=e
comment13.target=void\ introducir(java.lang.Comparable)
comment14.params=
comment14.target=void\ arreglar()
comment15.params=i
comment15.target=void\ arreglar(int)
comment16.params=
comment16.target=void\ arreglarIterativo()
comment16.text=Restablece\ la\ propiedad\ de\ orden\ de\ un\ Heap
comment17.params=e
comment17.target=boolean\ hayMenoresQue(java.lang.Comparable)
comment17.text=Ejercicio\ 5
comment18.params=e
comment18.target=boolean\ hayMayoresQue(java.lang.Comparable)
comment18.text=Ejercicio\ 6
comment19.params=e
comment19.target=boolean\ estaEn(java.lang.Comparable)
comment19.text=Ejercicio\ 7
comment2.params=n
comment2.target=MonticuloBinario(int)
comment2.text=crea\ una\ Cola\ de\ Prioridad\ (CP)\ vacia\ con\ capacidad\ inicial\ n
comment20.params=e
comment20.target=boolean\ estaEnRecursiva(java.lang.Comparable)
comment21.params=e\ i
comment21.target=boolean\ estaEnRecursiva(java.lang.Comparable,\ int)
comment22.params=x\ y
comment22.target=void\ borrarHojasEnRango(java.lang.Comparable,\ java.lang.Comparable)
comment22.text=Ejercicio\ 8
comment23.params=k
comment23.target=java.lang.Comparable\ eliminar(int)
comment23.text=Ejercicio\ 9\ *
comment24.params=k
comment24.target=java.lang.Comparable\ eliminar2(int)
comment25.params=
comment25.target=int\ igualesAlMinimo()
comment25.text=Ejercicio\ 10\ *
comment26.params=i
comment26.target=int\ igualesAlMinimo(int)
comment27.params=v
comment27.target=boolean\ esHeap(java.lang.Comparable[])
comment27.text=Ejercicio\ 11\ *
comment28.params=e
comment28.target=int\ menoresQue(java.lang.Comparable)
comment28.text=Ejercicio\ 12\ *
comment29.params=e\ i
comment29.target=int\ menoresQue(java.lang.Comparable,\ int)
comment3.params=
comment3.target=boolean\ esVacia()
comment3.text=comprueba\ si\ un\ Heap\ es\ vacio\ en\ Theta(1)
comment30.params=
comment30.target=java.lang.Comparable\ eliminar1aHoja()
comment30.text=Ejercicio\ 13\ *
comment31.params=v
comment31.target=void\ heapSort(java.lang.Comparable[])
comment31.text=Ejercicio\ 14\ *
comment32.params=v\ hueco\ fin
comment32.target=void\ hundirMax(java.lang.Comparable[],\ int,\ int)
comment33.params=v\ i\ d
comment33.target=void\ intercambiar(java.lang.Comparable[],\ int,\ int)
comment4.params=
comment4.target=java.lang.Comparable\ recuperarMin()
comment4.text=devuelve\ el\ minimo\ de\ un\ Heap\ en\ Theta(1)
comment5.params=e
comment5.target=void\ insertar(java.lang.Comparable)
comment5.text=inserta\ e\ en\ un\ Heap
comment6.params=e\ posIns
comment6.target=int\ reflotar(java.lang.Comparable,\ int)
comment7.params=
comment7.target=void\ duplicarArray()
comment8.params=
comment8.target=java.lang.Comparable\ eliminarMin()
comment8.text=recupera\ y\ elimina\ el\ minimo\ de\ un\ Heap
comment9.params=pos
comment9.target=void\ hundir(int)
numComments=34
